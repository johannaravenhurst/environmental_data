z = sim_3_dat$power,
xlab = "population dispersion (standard deviation)",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
persp3d(
x = sim_n_effect_size$effect_size,
y = sim_n_effect_size$sample_size,
z = sim_n_effect_size$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'yellow',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "population dispersion (standard deviation)",
ylab = "sample size", zlab = "power",
col = 'yellow',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
#save interactive plot to html file
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"sim_3_dat_power_sim_plot.html"),
selfcontained = TRUE
)
#save interactive plot to html file
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"sim_3_dat_power_sim_plot.html"),
selfcontained = TRUE
)
#Setup
rm(list = ls())
require(here)
birds   = read.csv(here("data", "bird.sub.csv"))
hab     = read.csv(here("data", "hab.sub.csv"))
birdhab = merge(
birds,
hab, by=c("basin", "sub"))
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
#functions from Lab 11
linear_simulator = function(x, y_int, slope, st_dev)
{
y_det = y_int + slope * x
output_sim = rnorm(n = length(x), mean = y_det, sd = st_dev)
return (output_sim)
}
#function for simulation loops
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
#Fit simple linear regression
fit_1 = lm(BRCR ~ ls, data = birdhab)
#Retrieve the model coefficients
fit_1_coefs = coefficients(fit_1)
str(fit_1_coefs)
#Retrieve the standard deviation parameter
fit_1_summary = summary(fit_1)
str(fit_1_summary)
fit_1_summary$sigma
#Store the intercept, slope, and standard deviation parameters from the model into the following variables:
int_obs <- fit_1_coefs["(Intercept)"]
slope_obs <- fit_1_coefs["ls"]
sd_obs <- fit_1_summary$sigma
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l', xlab = 'Sample size', ylab = 'Power')
abline(v = nrow(birdhab), lty = 2, col = 'red')
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l',
main = "Sample Size Simulation, reps = 30",
xlab = 'Sample size',
ylab = 'Statistical Power')
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l',
main = "Sample Size Simulation, reps = 30",
xlab = 'Sample size',
ylab = 'Statistical Power')
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l',
main = "Sample Size Simulation, reps = 30",
xlab = 'Sample size',
ylab = 'Statistical Power',
ylim = c(0, 1.0))
fit_lowess_50 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Original.'),
col=c("black", "blue"), lwd=2, inset=c(.1,.1))
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, newdata_sample_size$power, col = "red", pch = 21)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1))
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, newdata_sample_size$power, col = "red", pch = 21)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1))
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "b",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, newdata_sample_size$power, col = "red", pch = 21)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1))
View(newdata_sample_size)
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, col = "red", pch = 21)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1))
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, col = transparent("steelblue3", trans.val = .8), pch = 16)
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, col = "steelblue3", pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = c(1, ),  inset=c(.1,.1), pch = c( , 16))
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
plot(
x = newdata_sample_size$sample_size,
pch = 16,
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
points(newdata_sample_size$sample_size, col = "steelblue3", pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1), pch = 16)
}
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
curve(
fit_lowess_30(x), add = TRUE,
col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
#points(newdata_sample_size$sample_size, col = "steelblue3", pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1), pch = 16)
}
View(fit_lowess_50)
View(fit_lowess_30)
str(fit_lowess_30)
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
str(fit_lowess_30)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = "steelblue3", pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "red"), lwd=2, lty = 1,  inset=c(.1,.1), pch = 16)
}
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
str(fit_lowess_30)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = "steelblue3", pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(.1,.1))
}
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
str(fit_lowess_30)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = adjustcolor(col = "steelblue3", alpha.f = .4), pch = 16)
legend(
x="bottomright",
bty="n",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(.1,.1))
}
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
str(fit_lowess_30)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = adjustcolor(col = "steelblue3", alpha.f = .4), pch = 16)
legend(
x="bottomright",
bty="n", border = "black",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(.1,.1))
}
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = adjustcolor(col = "steelblue3", alpha.f = .4), pch = 16)
legend(
x="bottomright",
bty="o", border = "black",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(.1,.1))
}
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = adjustcolor(col = "steelblue3", alpha.f = .4), pch = 16)
legend(
x="bottomright",
bty="o", border = "black",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(.01,.01), lty = c(1, NA), pch = c(NA, 16))
}
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
str(fit_lowess_30)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
#maybe I should try using curve() to plot a line and then the points on the same figure?
{
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
main = "Sample Size/Power Simulation\nLOWESS: 30%",
ylab = "Statistical Power", xlab = "Sample Size")
#curve(
## col = "red", pch=16)
#plot(
#x = newdata_sample_size$sample_size,
#pch = 16)
points(newdata_sample_size$sample_size, predict(fit_lowess_30, newdata = newdata_sample_size), col = adjustcolor(col = "steelblue3", alpha.f = .4), pch = 16)
legend(
x="bottomright",
bty="o", border = "black",
legend=c('Smoothed', 'Simulated Points'),
col=c("black", "steelblue3"), inset=c(0,0), lty = c(1, NA), pch = c(NA, 16))
}
#Setup - read in dispersal.csv file and ricker_fun() with plot with my guess fit from Lab 5
dat_dispersal <- read.csv(here("data", "dispersal.csv"))
str(dat_dispersal)
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
#Plot of data with my best guesses to fit the Ricker curve to the data.
#The a parameter is equal to the slope at the start of the curve, so I guessed that it should be about 0.2/100 based on the rise/run I would expect to fit these data points. The x value at the highest point of the curve is equal to 1/b. I guessed that the highest point of the curve would fall around x=500, so 500 = 1/b or b = 1/500.
plot(dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
main = "Ricker Model Salamander\nFirst Time Breeders",
xlab = "distance class", ylab = "standardized dispersal rate")
curve(
ricker_fun(x, 0.2/100, 1/500), add = TRUE,
col = "black", type = "l", lty = 2, lwd = 3)
fit_ricker_nls = nls(
disp.rate.ftb ~ ricker_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_ricker_nls)
