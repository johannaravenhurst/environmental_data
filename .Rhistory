n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
#use expand.grid() to make a data frame with every combination of the two predictors
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
#use predict to make a vector of model predictions:
new_dat_all$pred_add_gcki = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int_gcki = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
#need matrices for data on the z-axis
z_gcki_add = matrix(
new_dat_all$pred_add_gcki,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int_gcki,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
#data setup - need dataframe with columns for both predictors (total basal area and slope)
#create sequences of values for both predictors:
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
#use expand.grid() to make a data frame with every combination of the two predictors
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
#use predict to make a vector of model predictions:
new_dat_all$pred_batot_gcki = predict(
fit_gcki_ba_tot,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_slope_gcki = predict(
fit_gcki_both_slope,
newdata = new_dat_all,
type = "response")
#data setup - need dataframe with columns for both predictors (total basal area and slope)
#create sequences of values for both predictors:
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
#use expand.grid() to make a data frame with every combination of the two predictors
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
#use predict to make a vector of model predictions:
new_dat_all$pred_batot_gcki = predict(
fit_gcki_ba_tot,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_slope_gcki = predict(
fit_gcki_slope,
newdata = new_dat_all,
type = "response")
#need matrices for data on the z-axis
z_gcki_ba_tot = matrix(
new_dat_all$pred_batot_gcki,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_slope = matrix(
new_dat_all$pred_slope_gcki,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_ba_tot,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "BA_Tot")
contour(
x = ba.tot,
y = slope,
z = z_gcki_slope,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Slope")
#data setup - need dataframe with columns for both predictors (total basal area and slope)
#create sequences of values for both predictors:
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
#use expand.grid() to make a data frame with every combination of the two predictors
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
#use predict to make a vector of model predictions:
new_dat_all$pred_add_gcki = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int_gcki = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
#need matrices for data on the z-axis
z_gcki_add = matrix(
new_dat_all$pred_add_gcki,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int_gcki,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
knitr::opts_chunk$set(echo = TRUE)
#load here package
require(here)
#load palmerpenguins package
library(palmerpenguins)
here()
#you can check the path to your RProject directory by just running the here() function
here()
#data.frame called "ginkgo" created using here() and read.csv().
ginkgo <- read.csv(here("data", "ginkgo_data_2021.csv"))
knitr::opts_chunk$set(echo = TRUE)
#Notes about setup code chunk options:
#include= FALSE to skip including that code chunk for the knit
#echo = FALSE to prevent printing of the R code that generated the plot
#It’s a good idea to name your code chunks. This makes it easier to debug your code. To give your chunk a name, simply type a space after the r and type a name. You need to add a comma after the name if you are adding echo = FALSE or another code chunk option. The name should come first.
qnorm(c(0.025, 0.975))
pnorm(0.75:3, mean = 5, sd = 2)
pnorm(0.75-3, mean = 5, sd = 2)
dbinom(5, 7,0.88)
#Probability of 5 or fewer successes
pbinom(5, 7, 0.88)
#Probability of more than 5 successes (use law of total probability and subtract from 1)
1 - pbinom(5, 7, 0.88)
pnorm(3, mean = 5, sd = 2)
#less than 3
pnorm(3, mean = 5, sd = 2)
#Answer = 0.16, or 16% probability.
#between 3 and 5
pnorm(5, mean = 5, sd = 2) - pnorm(3, mean = 5, sd = 2)
dnorm(0.5, mean=0, sd = 1)
dnorm(2, mean=0, sd = 1)
qbinom(0.95, 7, 0.88)
knitr::opts_chunk$set(echo = TRUE)
#Notes about setup code chunk options:
#include= FALSE to skip including that code chunk for the knit
#echo = FALSE to prevent printing of the R code that generated the plot
#It’s a good idea to name your code chunks. This makes it easier to debug your code. To give your chunk a name, simply type a space after the r and type a name. You need to add a comma after the name if you are adding echo = FALSE or another code chunk option. The name should come first.
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13)
## Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
## Typing the name of the vector into the console prints the contents
num_vec
## The print() function accomplishes the same task:
print(char_vec)
class(char_vec)
class(char_vec)
class(num_vec)
#matrix with numbers 1:12, arranged in 4 rows and filled by rows
matrix(1:12, byrow = TRUE, nrow = 4)
#matrix with numbers 1:12, arranged in 4 rows and filled by rows
matrix(1:12, byrow = TRUE, nrow = 4)
#matrix with days of the week, arranged in 2 rows and filled by columns
matrix(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), byrow = FALSE, nrow = 2)
#Tick count vectors:
puffers <- c(56, 43)
notch <- c(4, 87)
sugarloaf <- c(90, 5)
#Create the matrix
tick_counts <- matrix(c(puffers, notch, sugarloaf), nrow=3, byrow=TRUE)
#Create vectors with plot names, sample day names
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf")
sample_days <- c("Day 1", "Day 2")
#Name the columns with sample_days
colnames(tick_counts) <- sample_days
#Name the rows with plot names
rownames(tick_counts) <- plots
tick_counts
#Tick count vectors:
puffers <- c(56, 43)
notch <- c(4, 87)
sugarloaf <- c(90, 5)
#Create the matrix
tick_counts <- matrix(c(puffers, notch, sugarloaf), nrow=3, byrow=TRUE)
#Create vectors with plot names, sample day names
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf")
sample_days <- c("Day 1", "Day 2")
#Name the columns with sample_days
colnames(tick_counts) <- sample_days
#Name the rows with plot names
rownames(tick_counts) <- plots
totals <- rowSums(tick_counts)
tick_counts
#Tick count vectors:
puffers <- c(56, 43)
notch <- c(4, 87)
sugarloaf <- c(90, 5)
#Create the matrix
tick_counts <- matrix(c(puffers, notch, sugarloaf), nrow=3, byrow=TRUE)
totals <- rowSums(tick_counts)
#use cbind() to add a new vector to a matrix
all_tick_counts <- cbind(tick_counts, totals)
#Create vectors with plot names, sample day names
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf")
sample_days <- c("Day 1", "Day 2")
#Name the columns with sample_days
colnames(all_tick_counts) <- sample_days
#Tick count vectors:
puffers <- c(56, 43)
notch <- c(4, 87)
sugarloaf <- c(90, 5)
#Create the matrix
tick_counts <- matrix(c(puffers, notch, sugarloaf), nrow=3, byrow=TRUE)
totals <- rowSums(tick_counts)
#use cbind() to add a new vector to a matrix
all_tick_counts <- cbind(tick_counts, totals)
#Create vectors with plot names, sample day names
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf")
sample_days <- c("Day 1", "Day 2", "Total")
#Name the columns with sample_days
colnames(all_tick_counts) <- sample_days
#Name the rows with plot names
rownames(all_tick_counts) <- plots
all_tick_counts
#load here package
require(here)
#load palmerpenguins package
library(palmerpenguins)
#you can check the path to your RProject directory by just running the here() function
here()
#data.frame called "ginkgo" created using here() and read.csv().
ginkgo <- read.csv(here("data", "ginkgo_data_2021.csv"))
#If you check the R Environment, there is a data.frame called "ginkgo" with 756 observations and 6 variables.
View(ginkgo)
#select the notch.depth column in the ginkgo data
ginkgo$notch.depth
#select the notch.depth column in the ginkgo data
ginkgo$notch_depth
#select first row of the ginkgo data
ginkgo[1, ]
#select the element in row 2, column 3
ginkgo[2, 3]
#select the 3rd column of the ginkgo data
ginkgo[ , 3]
ginkgo[2, 3]
#select first row of the ginkgo data
ginkgo[1, ]
#select the element in row 2, column 3
ginkgo[2, 3]
#select the 3rd column of the ginkgo data
ginkgo[ , 3]
ginkgo_seeds <- ginkgo[seeds_present = TRUE]
ginkgo_seeds <- ginkgo[seeds_present >0 ]
ginkgo_seeds <- ginkgo[ginkgo$seeds_present = TRUE ]
ginkgo_seeds <- ginkgo[ginkgo$seeds_present > 0 ]
ginkgo_notch <- ginkgo[notch_depth > 0 ]
ginkgo_notch <- ginkgo[ginkgo$notch_depth > 0 ]
ginkgo_notch <- ginkgo[ginkgo$"notch_depth" > 0 ]
as.numeric(ginkgo$notch_depth)
as.numeric(ginkgo$notch_depth)
ginkgo_notch <- ginkgo[ginkgo$notch_depth > 0 ]
#this example selects element 1 and element 5
ginkgo[c(1, 5)]
#you can also use a colon to select all elements within a range, such as from 1-5.
ginkgo[c(1:5)]
day_1_ticks <- c(3, 4, 67, 87)
day_2_ticks <- c(56, 7, 98, 12)
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf", "Puffers Pond")
data.frame(day_1_ticks, day_2_ticks, plots)
day_1_ticks <- c(3, 4, 67, 87)
day_2_ticks <- c(56, 7, 98, 12)
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf", "Puffers Pond")
ticks <- data.frame(day_1_ticks, day_2_ticks, plots)
day_1_ticks <- c(3, 4, 67, 87)
day_2_ticks <- c(56, 7, 98, 12)
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf", "Puffers Pond")
data.frame(day_1_ticks, day_2_ticks, plots)
day_1_ticks <- c(3, 4, 67, 87)
day_2_ticks <- c(56, 7, 98, 12)
plots <- c("Puffers Pond", "The Notch", "Mt. Sugarloaf", "Puffers Pond")
tickdata <- data.frame(plots, day_1_ticks, day_2_ticks)
tickdata
#view first few lines and last few lines of penguin dataset
head(penguins)
tail(penguins)
str(peguins)
str(penguins)
str(ginkgo)
#view first few lines and last few lines of ginkgo dataset
head(ginkgo)
tail(ginkgo)
str(ginkgo)
#select the first 5 elements of the column notch_depth
ginkgo[1:5, "notch_depth"]
#select the first 5 elements of the column notch_depth
ginkgo[1:5, "notch_depth"]
head(ginkgo)
#select the notch.depth column in the ginkgo data
notch_ginkgo <- ginkgo$notch_depth
#Extract the measurements for only the Adelie penguins from the penguins dataset
dat_adelie = subset(penguins, species == "Adelie")
length(num_vec)
length(char_vec)
#find the number of rows in the ginkgo data.frame
nrow(ginkgo)
#find the number of columns in the ginkgo data.frame
ncol(ginkgo)
#find the dimensions of the ginkgo data.frame
dim(ginkgo)
#Summary statistics for ginkgo data.frame
summary(ginkgo)
#calculate the mean notch_depth for the ginkgo dataset
mean(ginkgo$notch_depth)
mean(ginkgo$petiole_length)
#calculate the mean notch_depth for the ginkgo dataset
mean(ginkgo$notch_depth)
#calculate the mean petiole_length for the ginkgo dataset
mean(ginkgo$petiole_length)
#answer = NA because we need to tell R to remove NA values before calculating the mean
mean(ginkgo$petiole_length, na.rm = TRUE)
#standard deviation of notch_depth from ginkgo data
sd(ginkgo$notch_depth)
plot(ginkgo$max_width, ginkgo$max_depth)
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 4,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 8,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 3,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 16,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 5,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
#Scatterplot from ginkgo data
#x = max leaf depth
#y = max leaf width
plot(ginkgo$max_depth, ginkgo$max_width,
main = "Ginkgo Max Leaf Depth and\nMax Leaf Width",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
cex = 0.5,
pch = 20,
col = "steelblue",
xlim = c(0, 150),
ylim = c(0, 140))
summary(penguin)
summary(penguins)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)")
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = 0:11)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = 0:12)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = 0:13)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = 11)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = 0:20)
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)")
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = c(0:20))
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = c(170, 180, 190, 200, 210, 220, 230))
summary(penguins)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = c(170, 180, 190, 200, 210, 220, 230, 240))
#use summary to examine min/max and decide what to do with breaks argument
summary(penguins$flipper_length_mm)
hist(penguins$flipper_length_mm,
main = "Histogram of Penguin Flipper Lengths",
xlab = "Flipper Length (mm)",
breaks = c(170, 180, 190, 200, 210, 220, 230, 240))
